<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 奔跑的丸子</title>
    <link>https://wanzi.im/categories/linux/</link>
    <description>Recent content in linux on 奔跑的丸子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 14 Nov 2019 17:22:42 +0800</lastBuildDate>
    
	<atom:link href="https://wanzi.im/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于K8S部署gitlab-runner</title>
      <link>https://wanzi.im/posts/2019/11/devops-gitlab-k8s-gitlabrunner/</link>
      <pubDate>Thu, 14 Nov 2019 17:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2019/11/devops-gitlab-k8s-gitlabrunner/</guid>
      <description>部署gitlab-runner 这里基于helm部署，参考：https://gitlab.com/gitlab-org/charts/gitlab-runner.git
1  helm install --namespace gitlab-managed-apps --name k8s-gitlab-runner -f values.yaml    注意：values.yaml文件需要设置privileged: true
构建基础镜像(docker in docker) Dockerfile文件内容：
1 2 3 4 5 6 7  FROM docker:19.03.1-dind WORKDIR /opt RUN echo &amp;#34;nameserver 114.114.114.114&amp;#34; &amp;gt;&amp;gt; /etc/resolv.conf RUN sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories RUN apk update RUN apk upgrade RUN apk add g++ gcc make docker docker-compose git   构建镜像并推送到harbor
1 2  docker build -t registry.test.cn/devops/docker-tool:19.03.1 .</description>
    </item>
    
    <item>
      <title>Git基础命令</title>
      <link>https://wanzi.im/posts/2018/07/git-commands-base/</link>
      <pubDate>Sat, 28 Jul 2018 17:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/07/git-commands-base/</guid>
      <description>&lt;h4 id=&#34;git全局设置&#34;&gt;Git全局设置：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;git config --global user.name &amp;#34;wanzi&amp;#34;
git config --global user.email &amp;#34;iwz2099@163.com&amp;#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>mac下openssl签发私有证书</title>
      <link>https://wanzi.im/posts/2018/05/openssl-issue-private-certificate/</link>
      <pubDate>Fri, 25 May 2018 13:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/05/openssl-issue-private-certificate/</guid>
      <description>生成客户端私钥: 1  openssl genrsa -out server.key 2048   生成客户端证书： 1  openssl req -new -sha256 -x509 -days 3650 -key server.key -out server.crt   生成证书申请文件： 1  openssl req -new -key server.key -out server.csr   生成CA私钥 采用des3加密，需要输入4位以上密码：
1  openssl genrsa -des3 -out ca.key 4096   生成CA证书 1  openssl req -new -x509 -days 3650 -key ca.key -out ca.crt    CA配置配置文件/private/etc/ssl/openssl.cnf(我这里是mac系统)添加如下配置
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  [ ca ] default_ca = ca_default [ ca_default ] dir = /etc/ssl/diyca # 指定了CA的根目录 certs = $dir/certs # 已经签发的证书的存储目录 crl_dir = $dir/crl # 存储证书吊销列表的目录 database = $dir/index.</description>
    </item>
    
  </channel>
</rss>