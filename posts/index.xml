<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 奔跑的丸子</title>
    <link>https://wanzi.im/posts/</link>
    <description>Recent content in Posts on 奔跑的丸子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 17 Dec 2019 10:22:42 +0800</lastBuildDate>
    
	<atom:link href="https://wanzi.im/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubernetes集群部署traefik2.1</title>
      <link>https://wanzi.im/posts/2019/12/kubernetes-traefik-v2.1-deploy/</link>
      <pubDate>Tue, 17 Dec 2019 10:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2019/12/kubernetes-traefik-v2.1-deploy/</guid>
      <description>架构&amp;amp;概念 Traefik2.x版本相比1.7.x架构有很大变化，正如上边这张架构图，最主要的功能是支持了TCP协议、增加了Router概念。
这里我们采用在kubernetes集群部署Traefik2.1，业务访问通过haproxy请求到traefik Ingress，下边是搭建过程涉及到一些概念：
 EntryPoints：Traefik的网络入口，定义请求接受的端口(不分http或tcp) CRD：Kubernetes API的扩展 IngressRouter：将传入请求转发到可以处理请求的服务，另外转发请求之前可以通过Middlewares动态更新请求 Middlewares：请求到达服务之前进行动态处理请求参数，比如header或转发规则等等。 TraefikService：如果果CRD定义了了这种类型，IngressRouter可以直接引用，处在IngressRouter和服务之间,类似于Maesh架构，更适合较为复杂场景  kubernetes配置SSL证书 因为业务服务使用https,这里先配置下SSL证书:
1  kubectl -n cattle-system create secret tls tls-rancher-ingress --cert=test.cn.pem --key=test.cn.key   CRD配置 这里定义了IngressRoute、Middleware、TLSOption、IngressRouteTCP、TraefikService,其中TraefikService是在2.1版本新增加的CRD
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  apiVersion: apiextensions.</description>
    </item>
    
    <item>
      <title>自动化部署k8s集群</title>
      <link>https://wanzi.im/posts/2019/12/kubernetes-deploy-automation/</link>
      <pubDate>Thu, 12 Dec 2019 10:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2019/12/kubernetes-deploy-automation/</guid>
      <description>环境准备  Master节点
1 2 3  172.16.244.14 172.16.244.16 172.16.244.18   Node节点
1 2  172.16.244.25 172.16.244.27   Master节点VIP地址: 172.16.243.13
 部署工具:Ansible/kubeasz
  初始化环境  安装Ansible
1 2 3 4 5  apt update apt-get install ansible expect git clone https://github.com/easzlab/kubeasz cd kubeasz cp * /etc/ansible/   配置ansible免密登录
1 2  ssh-keygen -t rsa -b 2048 #生成密钥 ./tools/yc-ssh-key-copy.sh hosts root &amp;#39;rootpassword&amp;#39;   准备二进制文件
1 2  cd tools .</description>
    </item>
    
    <item>
      <title>基于K8S部署gitlab-runner</title>
      <link>https://wanzi.im/posts/2019/11/devops-gitlab-k8s-gitlabrunner/</link>
      <pubDate>Thu, 14 Nov 2019 17:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2019/11/devops-gitlab-k8s-gitlabrunner/</guid>
      <description>部署gitlab-runner 这里基于helm部署，参考：https://gitlab.com/gitlab-org/charts/gitlab-runner.git
1  helm install --namespace gitlab-managed-apps --name k8s-gitlab-runner -f values.yaml    注意：values.yaml文件需要设置privileged: true
构建基础镜像(docker in docker) Dockerfile文件内容：
1 2 3 4 5 6 7  FROM docker:19.03.1-dind WORKDIR /opt RUN echo &amp;#34;nameserver 114.114.114.114&amp;#34; &amp;gt;&amp;gt; /etc/resolv.conf RUN sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories RUN apk update RUN apk upgrade RUN apk add g++ gcc make docker docker-compose git   构建镜像并推送到harbor
1 2  docker build -t registry.test.cn/devops/docker-tool:19.03.1 .</description>
    </item>
    
    <item>
      <title>基于Docker-compose搭建jenkins</title>
      <link>https://wanzi.im/posts/2019/11/devops-jenkins-install/</link>
      <pubDate>Mon, 11 Nov 2019 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2019/11/devops-jenkins-install/</guid>
      <description> docker-compose配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  version: &amp;#39;2&amp;#39; services: jenkins: image: jenkins/jenkins:latest restart: always environment: JAVA_OPTS: &amp;#34;-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai -Djava.awt.headless=true -Dmail.smtp.starttls.enable=true&amp;#34; ports: - &amp;#34;80:8080&amp;#34; - &amp;#34;50000:50000&amp;#34; volumes: - &amp;#39;/ssd/jenkins:/var/jenkins_home&amp;#39; - &amp;#39;/var/run/docker.sock:/var/run/docker.sock&amp;#39; - &amp;#39;/etc/localtime:/etc/localtime:ro&amp;#39; dns: 223.5.5.5 networks: - extnetwork networks: extnetwork: ipam: config: - subnet: 172.255.0.0/16   启动服务 1  docker-compose up -d   </description>
    </item>
    
    <item>
      <title>Hugo&#43;Github搭建个人博客</title>
      <link>https://wanzi.im/posts/2019/11/other-hugo-github-blog/</link>
      <pubDate>Sun, 10 Nov 2019 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2019/11/other-hugo-github-blog/</guid>
      <description>介绍 之前博客一直使用hexo搭建,随着用golang越来越多，一直想把博客也迁移到hugo,hugo就不用多说了go语言编写的静态网站生成器,简单、易用、高效、易扩展、快速部署.
我网站目录结构如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  ├── archetypes #存放default.md，头文件格式 │ └── default.md ├── config.toml #整个网站项目全局配置 ├── content #content目录存放博客文章（markdown文件） │ ├── about.md │ └── posts ├── data #存放数据或配置,可以是json|toml|yaml ├── layouts #存放的是网站的模板文件 ├── public #hugo编译后生成的静态文件 │ ├── 404.html │ ├── CNAME │ ├── about │ ├── categories │ ├── css │ ├── images │ ├── index.</description>
    </item>
    
    <item>
      <title>Mac系统配置炫酷终端(oh my zsh)</title>
      <link>https://wanzi.im/posts/2018/11/other-zsh-cool-install/</link>
      <pubDate>Sat, 10 Nov 2018 10:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/11/other-zsh-cool-install/</guid>
      <description>brew工具 官网:https://brew.sh
安装brew
1  /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34;   修改brew源为国内源
1 2 3 4 5 6 7  git -C &amp;#34;$(brew --repo)&amp;#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git git -C &amp;#34;$(brew --repo homebrew/core)&amp;#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git git -C &amp;#34;$(brew --repo homebrew/cask)&amp;#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles #追加到~/.zshrc brew update #更新homebrew brew upgrade #升级所有已经安装包 brew cleanup #升级完成后清理旧版本包   iterm2 安装iterm2
1  brew cask install iterm2   配置:</description>
    </item>
    
    <item>
      <title>Git基础命令</title>
      <link>https://wanzi.im/posts/2018/07/git-commands-base/</link>
      <pubDate>Sat, 28 Jul 2018 17:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/07/git-commands-base/</guid>
      <description>&lt;h4 id=&#34;git全局设置&#34;&gt;Git全局设置：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;git config --global user.name &amp;#34;wanzi&amp;#34;
git config --global user.email &amp;#34;iwz2099@163.com&amp;#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Dockerfile多阶段构建</title>
      <link>https://wanzi.im/posts/2018/07/docker-dockerfile-multi-stage/</link>
      <pubDate>Mon, 02 Jul 2018 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/07/docker-dockerfile-multi-stage/</guid>
      <description>Docker多阶段构建理解:
 构建镜像需要有一个基础镜像,后续操作就会基于该基础镜像构建 docker镜像文件里有层级概念,每执行一次RUN指令,镜像就会多一层,所以通过减少层级来减少镜像大小 多个from的时候,只有最后一个from的镜像才是镜像的根镜像  自己项目部署中多阶段构建示例:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  FROM golang:1.12.7 as build MAINTAINER wanzi &amp;lt;iwz2099@163.com&amp;gt; # 编译配置相关 ARG NAME=gaia ARG FLAGS=-tags=jsoniter ARG GOOS=linux ARG GOARCH=amd64 ARG PORT_TO_EXPOSE=10020 ENV GOPROXY https://mirrors.aliyun.com/goproxy/ ENV GO111MODULE on WORKDIR /opt/gaia COPY . . RUN GOOS=$GOOS GOARCH=$GOARCH go build -mod vendor -ldflags=&amp;#34;-s -w&amp;#34; -o $NAME $FLAGS FROM alpine WORKDIR /opt/gaia COPY --from=build /opt/gaia/gaia .</description>
    </item>
    
    <item>
      <title>Dockerfile语法详情</title>
      <link>https://wanzi.im/posts/2018/06/docker-dockerfile-details/</link>
      <pubDate>Thu, 21 Jun 2018 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/06/docker-dockerfile-details/</guid>
      <description>FROM 指定构建镜像使用的基础镜像,FROM必须是Dockerfile中非注释行的第一个指令,如果本地没有指定的镜像，则会自动从Docker的公共库pull镜像下来。 例子：
1  FROM ubuntu:14.04 #继承ubuntu:14.04   MAINTAINER 指定创建者信息
MAINTAINER wanzi &amp;ldquo;iwz2099@163.com&amp;rdquo;
ENV 设置环境变量，会被后续 RUN 指令使用，并在容器运行时保持。 ENV   # 只能设置一个变量 ENV = &amp;hellip; # 允许一次设置多个变量 例子：
1 2  ENV LANG en_US.UTF-8 ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8   RUN RUN  或 RUN [&amp;ldquo;executable&amp;rdquo;, &amp;ldquo;param1&amp;rdquo;, &amp;ldquo;param2&amp;rdquo;]。 例子：
1 2  RUN yum -y install bind-utils RUN [&amp;#34;/bin/bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;yum -y install bind-utils&amp;#34;]   前者将在shell终端中运行命令,即 /bin/sh -c yum -y install bind-utils；后者则使用exec执行。指定使用其它终端可以通过第二种方式实现。 每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史提交点来创建，类似源码的版本控制。当命令较长时可以使用 \ 来换行。</description>
    </item>
    
    <item>
      <title>Docker基础命令</title>
      <link>https://wanzi.im/posts/2018/06/docker-commands-base/</link>
      <pubDate>Wed, 20 Jun 2018 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/06/docker-commands-base/</guid>
      <description>&lt;h4 id=&#34;基础命令&#34;&gt;基础命令&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;docker info     #查看本地docker信息
docker search  openresty   #搜索远程镜像仓库
docker images      #查看当前系统镜像仓库镜像
docker pull centos  #获取远程镜像，默认不指定tag,为latest     
docker container  run -p 8000:80 --rm -t -i centos:latest /bin/bash  #-p将容器端口映射80到节点node8000端口，--rm终止后删除容器适合临时调试，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开
docker container exec -i -t b5d7bad57561 /bin/bash #进入正在运行容器
docker rmi $(docker images -f &amp;#34;dangling=true&amp;#34; -q) #批量删除无效的none镜像&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>mac下openssl签发私有证书</title>
      <link>https://wanzi.im/posts/2018/05/openssl-issue-private-certificate/</link>
      <pubDate>Fri, 25 May 2018 13:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/05/openssl-issue-private-certificate/</guid>
      <description>生成客户端私钥: 1  openssl genrsa -out server.key 2048   生成客户端证书： 1  openssl req -new -sha256 -x509 -days 3650 -key server.key -out server.crt   生成证书申请文件： 1  openssl req -new -key server.key -out server.csr   生成CA私钥 采用des3加密，需要输入4位以上密码：
1  openssl genrsa -des3 -out ca.key 4096   生成CA证书 1  openssl req -new -x509 -days 3650 -key ca.key -out ca.crt    CA配置配置文件/private/etc/ssl/openssl.cnf(我这里是mac系统)添加如下配置
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  [ ca ] default_ca = ca_default [ ca_default ] dir = /etc/ssl/diyca # 指定了CA的根目录 certs = $dir/certs # 已经签发的证书的存储目录 crl_dir = $dir/crl # 存储证书吊销列表的目录 database = $dir/index.</description>
    </item>
    
    <item>
      <title>saltstack之saltapi</title>
      <link>https://wanzi.im/posts/2018/02/devops-saltstack-saltapi/</link>
      <pubDate>Thu, 15 Feb 2018 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/02/devops-saltstack-saltapi/</guid>
      <description>安装 yum -y install salt-api
配置： cat /etc/salt/master.d/api.conf #配置证书和端口
1 2 3 4 5  rest_cherrypy: port: 8888 debug: True ssl_crt: /etc/pki/tls/certs/localhost.crt ssl_key: /etc/pki/tls/private/localhost_nopass.key   cat /etc/salt/master.d/eauth.conf #设置权限
1 2 3 4 5 6  external_auth: pam: saltapi: - .* - &amp;#39;@wheel&amp;#39; - &amp;#39;@runner&amp;#39;   添加账号 1 2  useradd -M -s /sbin/nologin saltapi echo &amp;#34;saltapi_xxxxxx&amp;#34; | passwd saltapi --stdin   启动服务： 1 2  systemctl enable salt-api systemctl start salt-api   测试： curl测试并获取token信息：</description>
    </item>
    
    <item>
      <title>saltstack之salt命令大全</title>
      <link>https://wanzi.im/posts/2018/02/devops-saltstack-commands/</link>
      <pubDate>Sat, 10 Feb 2018 16:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/02/devops-saltstack-commands/</guid>
      <description>常用命令 1 2 3 4 5 6 7 8 9  salt -N &amp;#39;ceph&amp;#39; test.ping #测试连通性 salt -E &amp;#39;^server10*&amp;#39; test.ping #正则匹配连通性 salt -S 192.168.150.101 test.ping #根据agent ip地址匹配执行 salt -S 192.168.150.0/24 test.ping #根据agent ip地址匹配执行 salt -N &amp;#39;ceph&amp;#39; cmd.run &amp;#39;df -Th&amp;#39; #按组查看磁盘使用 salt -N &amp;#39;ceph&amp;#39; cmd.exec_code python &amp;#39;import os; print os.system(&amp;#34;df -Th&amp;#34;)&amp;#39; #python代码执行 salt -N &amp;#39;ceph&amp;#39; cmd.exec_code perl &amp;#39;print scalar localtime&amp;#39; #perl代码执行 salt -G &amp;#39;osrelease:6.3&amp;#39; cmd.run &amp;#39;python -V&amp;#39; #根据grans信息过滤后执行 salt &amp;#39;*&amp;#39; smbios.</description>
    </item>
    
    <item>
      <title>python编码规范</title>
      <link>https://wanzi.im/posts/2018/01/python-coding-standards/</link>
      <pubDate>Sat, 20 Jan 2018 10:22:42 +0800</pubDate>
      
      <guid>https://wanzi.im/posts/2018/01/python-coding-standards/</guid>
      <description>首先python社群官网建议采用PEP8代码风格,可以参考下面网址：
英文：https://www.python.org/dev/peps/pep-0008/
中文：https://wiki.woodpecker.org.cn/moin/PythonCodingRule
我这里罗列一些自己认为更重要的部分：
编码声明  参考: https://www.python.org/dev/peps/pep-0263/#defining-the-encoding
 默认不设置为ASCII,可设置为
1  # coding=&amp;lt;encoding name&amp;gt;    或
1 2  #!/usr/bin/python # -*- coding: &amp;lt;encoding name&amp;gt; -*-   或
1 2  #!/usr/bin/python # coding: utf-8   只要满足如下正则表达式即可。
1  ^[ \t\v]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)    代码编排  四个空格一个缩进，不建议使用tab，更不建议混合使用tab和空格 单行最长79字符，换行可使用反斜杠，最好使用括号 类和同级别函数之间空2行，类中方法之间空一行 模块书写顺序: 模块说明和docstring，import，globals，constants，其他；其中import又按标准、第三方、自己编写顺序摆放，同时不建议书写在一行 操作符左右各加一个空格，函数默认参数使用的赋值符左右省略空格，各种右括号前不要加空格; 注释必须使用英文，最好是完整的句子，首字母大写，句后要有结束符，结束符后跟两个空格，开始下一句。如果是短语，可以省略结束符。 所有的共有模块、函数、类、方法写docstrings；非共有的没有必要，但是可以写注释（在def的下一行）  命名规范  尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。 模块命名尽量短小，使用全部小写的方式，可以使用下划线。 包命名尽量短小，使用全部小写的方式，不可以使用下划线。 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。 异常命名使用CapWords+Error后缀的方式。 全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是all机制;二是前缀一个下划线。 函数命名使用全部小写的方式，可以使用下划线。 常量命名使用全部大写的方式，可以使用下划线。 类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。 类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。 类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。 为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明a,访问时，只能通过Foo.</description>
    </item>
    
  </channel>
</rss>